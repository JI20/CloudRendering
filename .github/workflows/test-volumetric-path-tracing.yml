name: Test volumetric path tracing renderers

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest
    name: "${{ github.workflow }}"

    env:
      sgl_REPO_DIR: ${{ github.workspace }}/sgl-repo
      sgl_DIR: ${{ github.workspace }}/sgl
      swiftshader_DIR: ${{ github.workspace }}/swiftshader
      swiftshader_COMMIT_ID: 4db20a80409b207b3e134c93968468b7c3783eb6

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - uses: actions/checkout@v2
      with:
        repository: chrismile/sgl
        path: sgl-repo
        submodules: true

    - name: Install system packages
      run: |
        sudo apt-get update
        sudo apt-get install git cmake libglm-dev libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
        libpng-dev libboost-filesystem-dev libtinyxml2-dev libarchive-dev libglew-dev  libjsoncpp-dev libeigen3-dev \
        python3-dev libzmq3-dev libnetcdf-dev libgtest-dev

    - name: Install Vulkan SDK
      shell: bash
      run: |
        distro_code_name=$(lsb_release -c | grep -oP "\:\s+\K\S+")
        wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
        sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.204-${distro_code_name}.list \
        https://packages.lunarg.com/vulkan/1.3.204/lunarg-vulkan-1.3.204-${distro_code_name}.list
        sudo apt update
        sudo apt install vulkan-sdk shaderc

    - name: Configure CMake (sgl)
      run: cmake ${{env.sgl_REPO_DIR}} -B ${{env.sgl_REPO_DIR}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=${{env.sgl_DIR}}

    - name: Build (sgl)
      run: cmake --build ${{env.sgl_REPO_DIR}}/build --config ${{env.BUILD_TYPE}} --parallel 4

    - name: Install (sgl)
      run: cmake --build ${{env.sgl_REPO_DIR}}/build --config ${{env.BUILD_TYPE}} --target install

    - name: Configure CMake (CloudRendering)
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -Dsgl_DIR=${{env.sgl_DIR}}/lib/cmake/sgl -DUSE_GTEST=On

    - name: Build (CloudRendering)
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel 4

    - name: Cache SwiftShader binaries
      id: cache-swiftshader
      uses: actions/cache@v2
      with:
        path: ${{env.swiftshader_DIR}}
        key: ${{runner.os}}-swiftshader-${{env.BUILD_TYPE}}-${{env.swiftshader_COMMIT_ID}}

    - name: Build (SwiftShader)
      if: steps.cache-swiftshader.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/google/swiftshader.git ${{env.swiftshader_DIR}}
        git -C ${{env.swiftshader_DIR}} checkout ${{env.swiftshader_COMMIT_ID}}
        cmake ${{env.swiftshader_DIR}} -B ${{env.swiftshader_DIR}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        cmake --build ${{env.swiftshader_DIR}}/build --config ${{env.BUILD_TYPE}} --parallel 4

    - name: Run tests
      id: tests
      run: |
        echo "USER=$USER" >> $GITHUB_ENV
        #export LD_LIBRARY_PATH="${{env.swiftshader_DIR}}/build/Linux"
        export VK_ICD_FILENAMES="${{env.swiftshader_DIR}}/build/Linux/vk_swiftshader_icd.json"
        ${{github.workspace}}/build/CloudRendering_test

    - name: Archive logs and failure case images
      if: always() && steps.tests.outcome == 'failure'
      uses: actions/upload-artifact@v2
      with:
        name: vpt-output-images
        path: |
          /home/${{env.USER}}/.config/cloud-rendering/Logfile.html
          ${{github.workspace}}/build/*.png
